const express = require('express')
//requires express library

const mongoose = require('mongoose')
const jwt = require('jsonwebtoken')
const User = mongoose.model('User')
//gives us access to the User model in this file that now allows us to get access to the User collection. User is an object.

const router = express.Router()
// a router is an object that allows us to associated some number of route handlers with it

router.post('/signup', async (req, res) => {
    const {email, password} = req.body
    // the email and password are two attributes that come back from the req body on a post request 
    
    try {
        const user = new User({ email, password })
        //created a new User instance with the email and password from the req obj
        await user.save()
        //had to use async/await to await for the save to occur
        const token = jwt.sign({userId: user._id}, 'MY_SECRET_KEY')
        //we create a token with sign, the first argument is the information we want to use to create the token (in this case the user id). the second argument is the key that we are going to use to sign the token. 

        res.send({ token })
        //we are sending back the token property

    } catch (err) {
        return res.status(422).send(err.message)
    }
    // the try/catch will attempt to try the first code block (when the post request is made). If an error occurs, the catch will run and send an err response that is generated by the mongoose library
})
//anytime someone makes a post request to the /signup, run the function

router.post('/signin', async (req, res) => {
    const { email, password } = req.body

    if (!email || !password) {
        return res.status(422).send({ error: 'Must provide email and password' })
    }

    const user = await User.findOne({ email })
    
    if(!user){
        return res.status(422).send({ error: 'Invalid password or email' })
    }

    try {
        await user.comparePassword(password)
        const token = jwt.sign({ userId: user._id }, 'MY_SECRET_KEY')
        res.send({ token })
    } catch (err) {
        return res.status(422).send({ error: 'Invalid password or email'})
    }

})
//post request handler that checks authorization

module.exports = router
//allows us to import to other file